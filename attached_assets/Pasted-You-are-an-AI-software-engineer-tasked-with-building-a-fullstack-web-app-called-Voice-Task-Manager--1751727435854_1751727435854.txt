You are an AI software engineer tasked with building a fullstack web app called “Voice Task Manager.” The app lets users add, view, and manage tasks using voice input. Build it with clean, scalable code and deploy-ready structure.

---

### 📱 Features:
1. **Home Page**
   - Display today’s task list with:
     - Task title
     - Priority badge (High, Medium, Low)
     - Checkbox to mark as done.
   - Floating circular microphone button to add tasks via voice.

2. **Add Task Modal**
   - When microphone button is clicked:
     - Record user’s voice.
     - Convert speech to text using Google Cloud Speech-to-Text API (or any free alternative).
     - Save the task in the database.
     - Auto-assign priority based on keywords (e.g., “urgent” = High).

3. **Stats Page**
   - Bar chart showing:
     - Completed tasks
     - Pending tasks
     - Filter by day/week/month.

4. **Notifications**
   - Send push notifications 1 hour before task deadlines.

---

### 🛠 Tech Stack:
- **Frontend**: Next.js (React framework) + TailwindCSS for styling.
- **Backend**: FastAPI (Python) for REST APIs.
- **Voice Integration**: Google Cloud Speech-to-Text API (or Whisper if open-source).
- **Database**: MongoDB (for tasks & user data).
- **Auth**: Firebase Authentication (Google Sign-In).
- **Notifications**: Firebase Cloud Messaging (FCM).
- **Hosting**:
  - Frontend → Vercel
  - Backend → Render/Heroku
  - Database → MongoDB Atlas

---

### 🎨 Design Guidelines:
- Mobile-first, responsive design.
- Soothing pastel color palette (light blue, lavender).
- Rounded corners and subtle shadows for modern aesthetic.
- Use Heroicons for icons.

---

### ⚙️ Requirements:
1. Scaffold the project folder with clear separation:
   - `frontend/` → Next.js app
   - `backend/` → FastAPI app
2. Write clean, modular, and documented code.
3. Include `README.md` with setup instructions.
4. Provide `.env.example` for environment variables.

---

### 🧠 AI Expectations:
- Generate a simple ML model to auto-assign task priority (High/Medium/Low).
- Integrate voice-to-text API calls seamlessly.
- Ensure API error handling and validations.

---

### 🚀 Deliverables:
- Fully functional frontend + backend.
- Deployment-ready code.
- API documentation (Swagger for backend).
